cmake_minimum_required(VERSION {{ cmake_min_version }})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_library(settings INTERFACE)
add_library(${PROJECT_NAME}::settings ALIAS settings)

include({{ project_slug }}_warnings)
target_link_libraries(settings INTERFACE ${PROJECT_NAME}::compiler_warnings)

{%- if unit_testing != "None" %}

option(WITH_VALGRIND "Run unit tests with valgrind" OFF)
include({{ project_slug }}_add_uts)
{%- endif %}

{%- if code_coverage %}

option(WITH_COVERAGE "Prepare code-coverage report with coverage" OFF)
if(WITH_COVERAGE)
    message("[{{ project_slug }}]: Code coverage enabled.")
    include({{ project_slug }}_coverage)
    target_link_libraries(settings INTERFACE ${PROJECT_NAME}::coverage)
endif()
{%- endif %}
{%- if sanitize %}

option(WITH_SANITIZE "Build with address and ub sanitizer" OFF)
if(WITH_SANITIZE)
    message("[{{ project_slug }}]: Sanitizers enabled.")
    include({{ project_slug }}_sanitize)
    target_link_libraries(settings INTERFACE ${PROJECT_NAME}::sanitize)
endif()
{%- endif %}
{%- if include_what_you_use %}

option(WITH_IWYU "Enable include-what-you-use checking" OFF)
if(WITH_IWYU)
    message("[{{ project_slug }}]: include-what-you-use enabled.")
    include({{ project_slug }}_iwyu)
endif()
{%- endif %}

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" {%- if include_what_you_use %} AND NOT WITH_IWYU{%- endif %})
    add_compile_options(-stdlib=libc++)
    add_link_options(-stdlib=libc++)
endif()
