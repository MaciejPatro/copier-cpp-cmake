_subdirectory: "[[project_slug]]"

_skip_if_exists:
  - CHANGELOG.md
  - CREDITS.md

_jinja_extensions:
  - copier_templates_extensions.TemplateExtensionLoader
  - extensions/context.py:ContextUpdater

# TODO[MP] support for vcpkg will require handling of git
#_tasks:
#  - "{% if _copier_conf.src_path %} git init &&
#     {% if dependencies == 'vcpkg' %}git submodule add https://github.com/microsoft/vcpkg vcpkg && {% endif %}
#     git submodule init &&
#     git submodule update &&
#     git add --all &&
#     git commit -am 'Autogenerated code provided'{% endif %}"

# common settings
project_name:
  type: str
  help: Your project name
  placeholder: My Great Project

project_setup:
  type: str
  help: |
    Type of configuration:
    - basic: reasonable defaults for simple projects
    - expert: extensive setup with choices for testing framework, C++ standard,
      CI, static analysis, packaging etc.
  default: basic
  choices:
    - basic
    - expert

project_slug:
  type: str
  help: Your project slug name - main folder
  default: "{{ project_name|lower|replace('-', '_')|replace(' ', '_') }}"

project_type:
  type: str
  help: Your project type
  default: header-only library
  choices:
    - header-only library
    - single library
    - single executable
    - multi-library project
    - multi-library with executable

license:
  type: str
  help: Chosen project license
  default: MIT License
  choices:
    - MIT License
    - GNU AGPLv3
    - GNU GPLv3
    - GNU LGPLv3
    - Mozilla Public License 2.0
    - Apache License 2.0
    - Boost Software License 1.0
    - None

license_owner:
  type: str
  help: Your project slug name - main folder
  when: "{{ license != 'None' }}"
  placeholder: John Doe

# expert settings
cpp_standard:
  type: int
  default: 17
  when: "{{ project_setup == 'expert' }}"
  choices:
    Cpp23: 23
    Cpp20: 20
    Cpp17: 17
    Cpp14: 14
    Cpp11: 11
    Cpp98: 0

project_namespace:
  type: str
  help: namespace that will be used for the project (None if string is empty)
  when: "{{ project_setup == 'expert' }}"
  default: "{{ project_slug }}"

cmake_min_version:
  type: str
  help: Minimal CMake version required to run project in future
  when: "{{ project_setup == 'expert' }}"
  default: 3.17

dependencies:
  type: str
  help: Tool used for dependencies management
  when: "{{ project_setup == 'expert' }}"
  default: conan
  choices:
    - conan
# TODO: Support for vcpkg will be added in future   - vcpkg
    - None

unit_testing_98:
  when: "{{ cpp_standard == 0 and project_setup == 'expert' }}"
  help: Unit testing framework for the project
  default: GTest
  choices:
    - GTest
    - None

unit_testing_11:
  when: "{{ cpp_standard == 11 and project_setup == 'expert' }}"
  help: Unit testing framework for the project
  default: doctest
  choices:
    - doctest
    - GTest
    - None

unit_testing_14:
  when: "{{ cpp_standard == 14 and project_setup == 'expert' }}"
  help: Unit testing framework for the project
  default: doctest
  choices:
    - doctest
    - GTest
    - Catch2
    - None

unit_testing_17:
  when: "{{ cpp_standard >= 17 and project_setup == 'expert' }}"
  help: Unit testing framework for the project
  default: doctest
  choices:
    - doctest
    - GTest
    - Catch2
    - boost-ext-ut
    - None

ci_system:
  type: str
  help: Support for CI
  when: "{{ project_setup == 'expert' }}"
  default: 3.17
  choices:
    Gitlab CI: Gitlab
    Github actions: Github
    None: None

code_coverage:
  type: bool
  help: |
    Support for code coverage 
    - enabled by cmake setting -DWITH_COVERAGE=1
  when: "{{ project_setup == 'expert' }}"
  default: false

include_what_you_use:
  type: bool
  help: |
    Support for include-what-you-use-tool
    - enabled by cmake setting -DWITH_IWYU=1
  when: "{{ project_setup == 'expert' }}"
  default: false

sanitize:
  type: bool
  help: |
    Support for address and undefined behaviour sanitizers 
    - enabled by cmake setting -DWITH_SANITIZE=1
  when: "{{ project_setup == 'expert' }}"
  default: false
